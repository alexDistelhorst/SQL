--1.
--Quality Assurance
--SELECT * FROM tblSale
--SELECT * FROM tblSaleItem
--SELECT * FROM tblItem
--SELECT * FROM Item_Original

--Update Statement
UPDATE tblItem
SET ItemDescription = 'Desk Lamps'
WHERE ItemDescription = 'Desk Lamp'


/**Bulk update statement
update tblItem
set tblItem.ItemDescription = Item_Original.ItemDescription
from Item_Original
where tblItem.ItemPrice = Item_Original.ItemPrice
*/

SELECT * FROM tblSale

--Insert Statement
INSERT INTO tblSale (CustomerID, EmployeeID, SaleDate, Subtotal, Tax, Total)
VALUES(1, 2, 'Dec 13 2012 11:00AM', 2500, 280, 3710);

INSERT INTO tblSaleItem (SaleID, SaleItem, ItemID, ItemPrice)
VALUES(16 ,1, 2, 600);


--Delete Statement
DELETE FROM tblSale 
WHERE SaleID=1;


DELETE FROM tblSaleItem
WHERE SaleID=16;


/**How many delete statements used and why?
Used two statements for two different tables. Each table has its own data and has no relation to each other.
*/


--Create View Statement
CREATE VIEW vueSaleSummary
AS 
SELECT tblSale.SaleID, tblSale.SaleDate, tblSaleItem.SaleItem, tblSaleItem.ItemID,
tblItem.ItemDescription, tblItem.ItemPrice
FROM tblSale, tblSaleItem, tblItem, Item_Original

SELECT * FROM vueSaleSummary







--2.
--ufnGetFirstName FUNCTION

/**
Test script:
SELECT * FROM dbo.tblPersonNames;
SELECT FullName, dbo.ufnGetLastName(FullName) AS LastName from tblPersonNames;

SELECT FullName, dbo.ufnGetFirstName (FullName) AS FirstName,
dbo.ufnGetLastName(FullName) AS LastName from tblPersonNames;
*/

/**
Statement to drop the function, then re-create it:
IF OBJECT_ID('dbo.ufnGetLastName', 'FN') IS NOT NULL
DROP FUNCTION dbo.ufnGetLastName;
*/

--LastName Function
CREATE FUNCTION dbo.ufnGetLastName (@fullname varchar(100))
returns varchar(50)
AS
BEGIN

--declare the local variable: lastName
DECLARE @lastName varchar(50);

--declare the index variable to find the index of the separator that separates last name from first name
DECLARE @separatorIndex int;

--get the separator index value
--check if the default separator (,) exists
SET @separatorIndex = CHARINDEX(',', @fullname);
IF @separatorIndex > 0
	BEGIN
		SET @lastName = SUBSTRING(@fullname, 1, @separatorIndex-1);
	END

--if it does, use the substring function to find the last name
--if it does not, let's assume the space is the separator and the full name format is FirstName LastName
--find the index for the space, then find the last name
ELSE
	BEGIN
		SET @separatorIndex = CHARINDEX(' ', @fullname);
		SET @lastName = SUBSTRING(@fullname, @separatorIndex+1, (LEN(@fullname)-@separatorIndex));
	END

--return the last name
RETURN @lastName
END







--FirstName FUNCTION
/**
Statement to drop the function, then re-create it:
IF OBJECT_ID('dbo.ufnGetFirstName', 'FN') IS NOT NULL
DROP FUNCTION dbo.ufnGetFirstName;
*/

CREATE FUNCTION dbo.ufnGetFirstName (@fullname varchar(100))
returns varchar(50)
AS
BEGIN

--declare the local variable: lastName
DECLARE @firstName varchar(50);
DECLARE @lastName varchar(50);

--declare the index variable to find the index of the separator that separates last name from first name
DECLARE @separatorIndex int;

--get the separator index value
--check if the default separator (,) exists
SET @separatorIndex = CHARINDEX(',', @fullname);
IF @separatorIndex > 0
	BEGIN
		SET @firstName = SUBSTRING(@fullname, 1, @separatorIndex - 1);
	END

--if it does, use the substring function to find the last name
--if it does not, let's assume the space is the separator and the full name format is FirstName LastName
--find the index for the space, then find the last name
ELSE
	BEGIN
		SET @separatorIndex = CHARINDEX( ' ', @fullname);
		SET @firstName = SUBSTRING(@fullname, 1, @separatorIndex-1);
	END

--return the last name
RETURN @firstName
END






--ufnGetOrderGrandTotalWithoutDiscount FUNCTION
/**
Test script:
select * from tblPSMOrder;
select * from tblPSMOrderDetail;
select OrderID, dbo.ufnGetOrderGrandTotalWithoutDiscount(OrderID) as 'Grand Total w/o Discount' from tblPSMOrder;
*/

/**
Statement to drop the function, then re-create it:
IF OBJECT_ID('dbo.ufnGetOrderGrandTotalWithoutDiscount', 'FN') IS NOT NULL
DROP FUNCTION dbo.ufnGetOrderGrandTotalWithoutDiscount;
*/

CREATE FUNCTION dbo.ufnGetOrderGrandTotalWithoutDiscount (@orderID int)
returns float
AS
BEGIN

--Declare local variables: 
--@grandTotal float, @unitPrice float, @quantity int
DECLARE @grandTotal float, @unitPrice float, @quantity int;

--Initiate the local variable values to be zero
SET @grandTotal=0;
SET @unitPrice=0;
SET @quantity=0;

--Declare a cursor to get UnitPrice and Quantity for all products from tblPSMOrderDetail where OrderID=@orderID
DECLARE cs CURSOR FOR select UnitPrice, Quantity from tblPSMOrderDetail where OrderID=@orderID;

--Open the cursor
OPEN cs;

--Fetch UnitPrice and Quantity into @unitPrice, @quantity
FETCH next from cs INTO @unitPrice, @quantity

--Use @@FETCH_STATUS to check if there are more records in the cursor
--@@FETCH_STATUS=0 --> it successfully fetched a row; @@FETCH_STATUS=-1 --> no more
WHILE @@FETCH_STATUS=0
BEGIN
	--calculate the grand total without discount 
	SET @grandTotal = @grandTotal + @unitPrice * @quantity
	--fetch next row from the cursor
	FETCH next from cs INTO @unitPrice, @quantity
END

--close the cursor
CLOSE cs;
--deallocate the cursor in memory
DEALLOCATE cs;
--return @grandTotal
RETURN @grandTotal
END
